// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	models "github.com/alper.meric/messaging-system/models"
	mock "github.com/stretchr/testify/mock"
)

// MessageServiceInterface is an autogenerated mock type for the MessageServiceInterface type
type MessageServiceInterface struct {
	mock.Mock
}

type MessageServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MessageServiceInterface) EXPECT() *MessageServiceInterface_Expecter {
	return &MessageServiceInterface_Expecter{mock: &_m.Mock}
}

// GetSentMessages provides a mock function with given fields: page, limit
func (_m *MessageServiceInterface) GetSentMessages(page int, limit int) ([]models.Message, int, error) {
	ret := _m.Called(page, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetSentMessages")
	}

	var r0 []models.Message
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int) ([]models.Message, int, error)); ok {
		return rf(page, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int) []models.Message); ok {
		r0 = rf(page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) int); ok {
		r1 = rf(page, limit)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(page, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MessageServiceInterface_GetSentMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSentMessages'
type MessageServiceInterface_GetSentMessages_Call struct {
	*mock.Call
}

// GetSentMessages is a helper method to define mock.On call
//   - page int
//   - limit int
func (_e *MessageServiceInterface_Expecter) GetSentMessages(page interface{}, limit interface{}) *MessageServiceInterface_GetSentMessages_Call {
	return &MessageServiceInterface_GetSentMessages_Call{Call: _e.mock.On("GetSentMessages", page, limit)}
}

func (_c *MessageServiceInterface_GetSentMessages_Call) Run(run func(page int, limit int)) *MessageServiceInterface_GetSentMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *MessageServiceInterface_GetSentMessages_Call) Return(_a0 []models.Message, _a1 int, _a2 error) *MessageServiceInterface_GetSentMessages_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MessageServiceInterface_GetSentMessages_Call) RunAndReturn(run func(int, int) ([]models.Message, int, error)) *MessageServiceInterface_GetSentMessages_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields:
func (_m *MessageServiceInterface) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MessageServiceInterface_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MessageServiceInterface_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MessageServiceInterface_Expecter) Start() *MessageServiceInterface_Start_Call {
	return &MessageServiceInterface_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MessageServiceInterface_Start_Call) Run(run func()) *MessageServiceInterface_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MessageServiceInterface_Start_Call) Return(_a0 error) *MessageServiceInterface_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessageServiceInterface_Start_Call) RunAndReturn(run func() error) *MessageServiceInterface_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function with given fields:
func (_m *MessageServiceInterface) Status() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MessageServiceInterface_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type MessageServiceInterface_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
func (_e *MessageServiceInterface_Expecter) Status() *MessageServiceInterface_Status_Call {
	return &MessageServiceInterface_Status_Call{Call: _e.mock.On("Status")}
}

func (_c *MessageServiceInterface_Status_Call) Run(run func()) *MessageServiceInterface_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MessageServiceInterface_Status_Call) Return(_a0 bool) *MessageServiceInterface_Status_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessageServiceInterface_Status_Call) RunAndReturn(run func() bool) *MessageServiceInterface_Status_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields:
func (_m *MessageServiceInterface) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MessageServiceInterface_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MessageServiceInterface_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MessageServiceInterface_Expecter) Stop() *MessageServiceInterface_Stop_Call {
	return &MessageServiceInterface_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MessageServiceInterface_Stop_Call) Run(run func()) *MessageServiceInterface_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MessageServiceInterface_Stop_Call) Return(_a0 error) *MessageServiceInterface_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessageServiceInterface_Stop_Call) RunAndReturn(run func() error) *MessageServiceInterface_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewMessageServiceInterface creates a new instance of MessageServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessageServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessageServiceInterface {
	mock := &MessageServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
